require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'

require 'net/http'

Dir[File.join(File.dirname(__FILE__), 'lib', 'tasks', '*.rake')].each do |ext|
  load ext
end

# Helper for retrieving HTML files. Only used to check or trigger things so
# no highclass implementation...

def fetch(uri, limit = 10)
  raise ArgumentError, 'HTTP redirect too deep' if limit == 0

  response = Net::HTTP.get_response(URI.parse(uri))

  case response
  when Net::HTTPSuccess then
    return response
  when Net::HTTPRedirection then
    return fetch(response['location'], limit - 1)
  else
    return response.error!
  end
end

# Returns an absolute path for the requested executable. Falls back to 
# returning only the executable if an exception is raised.

def which_executable(executable)
  begin
    if (path = `which #{executable}`.chomp).empty?
      $stderr.puts "!!Error: Could not find \"#{executable}\""
      exit
    end
  rescue Exception
    path = executable
  end

  return path
end

desc 'Display some help and the README'
task :help do
  puts 'Call "rake --tasks" to learn what tasks are available...'
  puts
  puts File.read('README')
end

task :default => [:help]

namespace :appengine do
  desc 'Start a local test server'
  task :run do
    puts 'Start a local test server'
    `(dev_appserver.rb .) 1>&2`
  end

  desc 'Force rebuilding "WEB-INF/lib/gems.jar"'
  task :rebuildgems do
    puts 'Force rebuilding "WEB-INF/lib/gems.jar"'
    `(appcfg.rb gem help install) 2> /dev/null 1>&2`
  end

  desc 'Build the application package'
  task :bundle do
    puts 'Build the application package.'
    `(appcfg.rb --email={{email}} --enable_jar_splitting bundle .) 1>&2`
  end

  desc 'Upload the application code to the server'
  task :update do
    puts 'Upload the new application code (this may take a while).'
    `(appcfg.rb --email={{email}} --enable_jar_splitting update .) 1>&2`
  end

  desc 'Roll back a blocked and halfway broken deploy'
  task :rollback do
    puts 'Roll back a blocked and halfway broken deploy.'
    `(appcfg.rb --email={{email}} rollback .) 1>&2`
  end

  desc 'Deploy the application (build package and upload application code)'
  task :deploy => [:rebuildgems, :bundle, :update]
end
